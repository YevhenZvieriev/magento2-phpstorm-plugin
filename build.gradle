/*
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
import org.jetbrains.intellij.platform.gradle.TestFrameworkType

plugins {
    id "org.jetbrains.intellij.platform" version "2.1.0"
    id 'checkstyle'
    id 'pmd'
    id 'org.jetbrains.changelog' version '2.2.0'
}

repositories {
    mavenCentral()

    intellijPlatform {
        defaultRepositories()
        marketplace()
    }
}

group 'com.magento.idea'
version '5.4.0'

apply plugin: 'org.jetbrains.intellij.platform'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'org.jetbrains.changelog'

def phpPluginVersion = System.getProperty("phpPluginVersion", "242.20224.427")
def ideaVersion = System.getProperty("ideaVersion", "2024.2")
def javaVersion = 17

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

intellijPlatform {
    version = ideaVersion
    projectName = 'com.magento.idea.magento2plugin'

    pluginConfiguration {
        id = 'com.magento.idea.magento2plugin'
        name = 'Magento PhpStorm'
        version = '5.4.0'
        description = 'This is a PhpStorm IDE plugin for a better Magento 2 development workflow.'
        changeNotes = provider { changelog.getLatest().toHTML() } as Provider<? extends String>
    }
}

sourceSets {
    main {
        java.srcDirs 'src'
        resources.srcDir 'resources'
    }
    test {
        java.srcDir 'tests'
        resources.srcDir 'testData'
    }
}

publishPlugin {
    token = System.getenv("MAGENTO_PHPSTORM_intellijPublishToken")
    if (Boolean.valueOf(System.getenv("MAGENTO_PHPSTORM_isAlpha"))) {
        channels = ['alpha']
        version = version + "-alpha-" + getDate()
    }
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd-HH-mm')
    return formattedDate
}

apply from: "${project.rootDir}/gradle-tasks/staticChecks.gradle"

changelog {
    version = "${project.version}"
    path = "${project.projectDir}/CHANGELOG.md"
    header = provider { "[${project.version}] - ${getDate()}" }
    headerParserRegex = ~/(\d+\.)?(\d+\.)?(\*|\d+)/
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
}

idea {
    project {
        jdkName         = javaVersion
        languageLevel   = javaVersion
    }

    module {
        generatedSourceDirs += file('gen')
    }
}

dependencies {
    implementation(
            "org.junit.jupiter:junit-jupiter:5.8.2",
            "com.googlecode.json-simple:json-simple:1.1.1"
    )
    testRuntimeOnly('org.junit.vintage:junit-vintage-engine:5.9.0')
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.9.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.00")

    intellijPlatform {
        intellijIdeaUltimate '2024.2.3'
        plugin("com.jetbrains.php", phpPluginVersion)
        plugin("com.intellij.lang.jsgraphql", "242.20224.155")
        bundledPlugin "JavaScript"
        instrumentationTools()
        bundledPlugin 'com.intellij.java'

        testFramework TestFrameworkType.Platform.INSTANCE
    }
}

test {
    useJUnitPlatform {
        includeEngines("junit-vintage")
    }
    dependsOn cleanTest
    testLogging.showStandardStreams = true
    testLogging {
        lifecycle {
            events "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
    maxHeapSize = '1G'
}
